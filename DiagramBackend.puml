@startuml ETL Framework Backend

!theme plain
skinparam componentStyle uml2
skinparam defaultFontName "Segoe UI", "Helvetica", "Arial"
skinparam package {
    BackgroundColor LightBlue
    BorderColor RoyalBlue
}
skinparam component {
    BackgroundColor LightYellow
    ArrowColor Navy
    BorderColor Navy
}
skinparam actor {
    BackgroundColor LightBlue
    BorderColor RoyalBlue
}
skinparam interface {
    BackgroundColor LightPink
    BorderColor Firebrick
}
skinparam note {
    BackgroundColor LightGoldenRodYellow
    BorderColor GoldenRod
}

' #############################################
' ###      ENTRY POINTS (Clients / Runners) ###
' #############################################

package "Clients / Runners" {
    class "Frontend GUI" as Frontend
    package "Manual / Batch Execution" {
        class "run_pipeline_with_parameter_file.py" as BatchRunner {
            + main(config_file)
        }
        class "run_pipeline_directly.py" as DirectRunner {
            + main()
        }
    }
    package "API Clients" {
        class "call_controlled_service.py" as ControlledClient {
            + POST /proxy/controlled_service
        }
        class "call_configured_service.py" as ConfiguredClient {
            + POST /proxy/configured_service/{config_name}
        }
    }
}

' #############################################
' ###        BACKEND API SERVER             ###
' #############################################

package "backend.api" {
    class "main.py" as FastApiApp
    class "pipelines_router.py" as PipelinesRouter
    class "pipeline_service.py" as PipelineService
    class "configured_service_router.py" as ConfiguredRouter
    class "proxy_configured_service.py" as ConfiguredService
    class "proxy_controlled_service.py" as ControlledService
    package "schemas" {
        class PipelineDefinition
        class PluginInfo
    }
}

' #############################################
' ###           CORE FRAMEWORK              ###
' #############################################

package "backend.core" {
    package "pipeline" {
        class StepExecutor
        class DependencyResolver
    }

    package "plugin_manager" {
        class FrameworkManager <<singleton>>
        class EtlHookSpecs <<HookSpec>>
    }

    package "data_container" {
        class DataContainer
        enum SupportedFormats
    }

    package "config" {
        class ConfigLoader
        class ConfigValidator
    }
}

' #############################################
' ###              PLUGINS                  ###
' #############################################
package "backend.plugins" {
    class BasePlugin <<abstract>> {
        +execute(input_data)
        +prev_execute()
        +run() <<abstract>>
        +post_execute()
        +get_plugin_name() <<abstract>>
        +get_parameters_schema() <<abstract>>
        +finalize_container()
    }

    class "DuckDBTransformer"
    class "HttpLoader"
    class "Jinja2Transformer"
    class "SparkTransformer"
    class "FtpExtractor"
    class "JsonSchemaValidator"

    DuckDBTransformer --|> BasePlugin
    HttpLoader --|> BasePlugin
    Jinja2Transformer --|> BasePlugin
    SparkTransformer --|> BasePlugin
    FtpExtractor --|> BasePlugin
    JsonSchemaValidator --|> BasePlugin
}

' #############################################
' ###             UTILITIES                 ###
' #############################################
package "backend.utils" {
    class "file_utils" as FileUtils <<utility>>
    class "logger" as Logger <<utility>>
    ' ... others
}

' #############################################
' ###            RELATIONSHIPS              ###
' #############################################

' --- API Execution Flow ---
Frontend ..> FastApiApp : HTTP Request
FastApiApp ..> PipelinesRouter
FastApiApp ..> ConfiguredRouter
ConfiguredRouter ..> ConfiguredService
ControlledClient ..> ControlledService : sends steps JSON
ConfiguredClient ..> ConfiguredService : sends data only

PipelinesRouter ..> PipelineService
PipelinesRouter ..> backend.api.schemas.PipelineDefinition : uses for validation
PipelineService ..> "Prefect Flow" : dynamically builds & runs
"Prefect Flow" ..> StepExecutor : (via task)

' --- Manual / Batch Execution Flow ---
BatchRunner ..> "Prefect Flow" : triggers
DirectRunner ..> FrameworkManager : uses directly

' --- Core Engine Flow ---
StepExecutor ..> FrameworkManager : uses singleton
FrameworkManager ..> backend.plugins : discovers plugins
FrameworkManager ..> EtlHookSpecs : uses for spec
StepExecutor ..> DataContainer : passes between steps

' --- Utility and Other Dependencies ---
StepExecutor ..> FileUtils : uses
backend.plugins ..> DataContainer
backend.plugins ..> Logger

@enduml
